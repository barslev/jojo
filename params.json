{"name":"Jojo","body":"jojo\r\n====\r\nthe 10 second blog-engine for hackers (in javascript).\r\n\r\nInspired heavily by [toto](https://github.com/cloudhead/toto)\r\n\r\nI rewrote it because I was frustrated at not being able integrate with my current server without starting 2 servers.\r\nAs a result, jojo can create an [express](http://expressjs.com/) server\r\n```\r\nvar app = require('jojo').createServer();\r\n```\r\n\r\nor you can use jojo as [express](http://expressjs.com/) middleware.\r\n```\r\nvar app = require('express').createServer(),\r\n    jojo = require('jojo');\r\napp.use(jojo);\r\n```\r\n\r\nGetting started\r\n===============\r\nGitHub\r\n------\r\nThis GitHub repo is a pre-boxed funtional blog. Run the two commands and you will have a blog running at [localhost:8080](http://localhost:8080).\r\n```\r\ngit clone git://github.com/twolfson/jojo.git\r\nnode app.js // Server is running at http://localhost:8080/\r\n```\r\n\r\nNPM\r\n---\r\njojo is available as an npm package and can be used in any node project as such. This method is not as suggested since none of the views are set up.\r\n```\r\nnpm install jojo\r\n```\r\n\r\nConfiguring jojo\r\n================\r\njojo was built to use express settings for the majority of its configuration. This means you can update jojo's configuration as you do with express:\r\n```\r\napp.set('jojo settingA', true);\r\napp.settings['jojo settingB'] = true;\r\n```\r\n\r\nDefault settings\r\n----------------\r\n```\r\n// Base URL used by jojo for all blog posts\r\n// (i.e. http://localhost:8080/ will be an index page containing summaries of recent blog posts.)\r\napp.set('jojo basepath', '/');\r\n\r\n// Directory where articles are read from\r\napp.set('jojo articles', 'articles');\r\n\r\n// View file used to render page that summarizes recent blog posts\r\napp.set('jojo index view', 'pages/index');\r\n\r\n// View file used to render page each blog post\r\napp.set('jojo article view', 'pages/article');\r\n\r\n// View file used to render RSS feed for blog\r\napp.set('jojo rss view', 'xml');\r\n\r\n// Data parser used for data at the head of each blog file\r\napp.set('jojo data parser', 'json');\r\n\r\n// Formatter to use while reading blog content\r\napp.set('jojo formatter', 'showdown');\r\n```\r\n\r\nAPI\r\n===\r\njojo\r\n----\r\njojo is a middleware function for [express](http://expressjs.com/). It accepts the standard set of parameters (req, res, next).\r\n\r\njojo.config\r\n-----------\r\nThe config is data available in all jojo views. This is initially read in via config.jojo.json which a sibling explanation file config.jojo.explanation.json.\r\nCurrently, this is semantically improper since there is no config data for jojo present here.\r\n\r\njojo.createServer\r\n-----------------\r\nCreates and returns an express server with the same parameters it is given and includes jojo as middleware. \r\n\r\njojo.index\r\n----------\r\nMiddleware function for generating the index view with all articles. It accepts the standard set of parameters (req, res, next).\r\n\r\njojo.article\r\n----------\r\nMiddleware function for generating an article view. It accepts the standard set of parameters (req, res, next).\r\n\r\njojo.rss\r\n----------\r\nMiddleware function for generating blog rss. It accepts the standard set of parameters (req, res, next).\r\n\r\njojo.getUrl\r\n-----------\r\nOverwritable function for generating the URL of a blog post. Defaults to YYYY-MM-DD-blog-post-title.\r\n\r\njojo.getSummary\r\n-----------\r\nOverwritable function for generating the summary of a blog post. Defaults to slicing at 150 characters.\r\n\r\njojo.Yoyo\r\n---------\r\nConstructor function that binds an app and its state to stateless article reading.\r\n```\r\n@param {Object} [app] Server to bind on\r\n@param {Object} [app.settings] Settings to use from the server\r\n```\r\n\r\njojo.readArticles\r\n-----------\r\nFunction to read in articles from a specific directory. Note: This will always use 'json' and 'showdown' to parse the file. If you want to use custom parsers, you must construct a new jojo.Yoyo.\r\n```\r\n@param {String} articleDir Directory to read articles from\r\n@param {Function} callback Error first callback to return article to\r\n```\r\n\r\njojo.readArticle\r\n-----------\r\nFunction to read in an article. Note: This will always use 'json' and 'showdown' to parse the file. If you want to use custom parsers, you must construct a new jojo.Yoyo.\r\n```\r\n@param {String} articlePath Path to read in an article from\r\n@param {Function} callback Error first callback to return article to\r\n```\r\n\r\njojo.parseArticle\r\n-----------\r\nFunction to parse an article. Note: This will always use 'json' and 'showdown' to parse the file. If you want to use custom parsers, you must construct a new jojo.Yoyo.\r\n```\r\n@param {String} articlePath Path to read in an article from\r\n@param {Function} callback Error first callback to return article to\r\n```\r\n\r\njojo.express\r\n------------\r\nExpress object that is being used by jojo.","tagline":"the 10 second blog-engine for hackers (in javascript)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}