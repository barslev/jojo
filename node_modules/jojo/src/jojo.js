var fs = require('fs'),
    path = require('path'),
    url = require('url');

// TODO: What the fuck does this mean???
// TODO: Restore config.callouts (config should not be a local variable?)

// TODO: Switch over to a static file creator and file watching

// TODO: Implement RSS

/**
 * jojo - 10 second blog engine for hackers (in javascript)
 * @param {Object<ExpressServer>} [app] App to write to
 * @param {Object} [options] Various options corresponding to jojo
 * @param {String} [options.baseRoute='/'] Route where the base file will be rendered
 * @param {String} [options.templateEngine='ejs'] Route where the base file will be rendered
 * @param {String} [options.templateDir='templates'] Directory to retrieve templates from
 * @param {String} [options.articleDir='articles'] Directory to retrieve articles from
 * @param {Function} [options.formatter='showdown'] Processor used for articles // TODO: name this proeprly
 * @returns {Object<ExpressServer>} Express server initiall passed or created with the proper routes
 */
function jojo(req, res, next) {
  // Grab the url, jojoBase
  // TODO: Figure out how to use express route testing
  var url = req.url,
      app = req.app,
      settings = app.settings,
      basepath = settings['jojo basepath'] || '/',
      cwd = process.cwd(),
      articleDir = settings['jojo articles'] || path.join(cwd, 'articles'),
      formatEngine = settings['jojo formatter'] || 'showdown',
      indexView = settings['jojo index view'],
      articleView = settings['jojo article view'],
      baseIndex;

  // If we are in the base route
  if (url === basepath) {
    // and there is an index view
    if (indexView) {
      // TODO: Index page with articles
      return res.render(indexView, 'Post summary');
    }
  } else {
    baseIndex = url.indexOf(basepath);
    if (baseIndex !== -1) {
    // TODO: Abstract this into a jojo.readArticles (and readArticlesSync?) function
    // Otherwise, attempt to find a matching article
      return fs.readdir(articleDir, function (err, fileNames) {
        var articleUrl = url.slice(baseIndex + 1);

        // If there is an error, log it and continue to the next method
        if (err) {
          console.error('Article directory could not be read: ', articleDir);
          console.error(err);
          return next();
        }

        // Iterate the files
        var i = 0,
            len = fileNames.length,
            fileName,
            fileParts,
            articleName,
            fileFound = false;
        for (; i < len; i++) {
          fileName = fileNames[i];

          // Remove the extension from the file
          fileParts = fileName.split('.');
          if (fileParts.length > 1) {
            fileParts.pop();
          }

          // If it matches our article url, save it
          articleName = fileParts.join('.');
          if (articleUrl.indexOf(articleName) !== -1) {
            fileFound = true;
            break;
          }
        }

        // If the file was found, interpret it
        if (fileFound) {
          fs.readFile(path.join(articleDir, fileName), 'utf8', function (err, file) {
            // If there was an error, log it and call the next method
            if (err) {
              console.error('Article could not be read: ', fileName);
              console.error(err);
              return next();
            }

            var formatter = require(formatEngine);

            // If the engine is showdown, get the proper formatter
            if (formatEngine === 'showdown') {
              // This is so wrong... on so many levels... =_=
              var tempThis = {};
              formatter.Showdown.converter.call(tempThis);
              formatter = tempThis.makeHtml;
            }

            // TODO: This is what cloudhead uses but I am not too fond of it
            // Find where the JSON ends (denoted by a double line break)
            var dblLineBreakIndex = file.search(/\n\r?\n/g);

            // Fallback the dblLineBreakIndex
            if (dblLineBreakIndex === -1) {
              dblLineBreakIndex = file.length;
            }

            // Break up the properties and content
            var propsStr = file.slice(0, dblLineBreakIndex),
                props = new Function('return ' + propsStr + ';')(),
                rawContent = file.slice(dblLineBreakIndex);

            // Render the content via the formatter
            var content = formatter(rawContent),
            // TODO: Allow for non-json parser (e.g. yaml)
                renderObj = JSON.parse(propsStr);

            // Save the content to the renderObj
            renderObj.content = content;
            
            // TODO: Proper config item
            renderObj.config = app.settings;
            
            // If there is an articleView, render through it
            if (articleView !== undefined) {
              // TODO: Allow for alternative jojo render engine?
              res.render(articleView, renderObj);
            } else {
            // Otherwise, use res.send
              res.send(content);
            }
          });
        } else {
          // Otherwise, call the next method
          next();
        }
      });
    }
  }
  // Otherwise, call the next method
  next();
}

// Sugar method for creating a server
jojo.createServer = function () {
  // Create a server an express server
  var express = require('express'),
      server = express.createServer.apply(express, arguments);

  // Bind jojo to the server
  server.use(jojo);

  // Return the bound server
  return server;
};

// TODO: jojo.static which preloads views and does not dynamically fetch during each request

// Export jojo
module.exports = jojo;